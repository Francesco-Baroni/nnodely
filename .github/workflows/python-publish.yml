# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
#name: Publish python package
#
#on:
#  release:
#    types: [published]
#
#permissions:
#  contents: read
#
#jobs:
#  release-build:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#      - uses: actions/checkout@v4
#      - name: Set up Python
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.x"
#
#      - name: Build release distributions
#        run: |
#          # NOTE: put your own distribution build steps here.
#          python -m pip install build
#          python -m build
#
#      - name: Upload distributions
#        uses: actions/upload-artifact@v4
#        with:
#          name: release-dists
#          path: dist/
#
#  pypi-publish:
#    runs-on: ubuntu-latest
#    needs:
#      - release-build
#    permissions:
#      # IMPORTANT: this permission is mandatory for trusted publishing
#      id-token: write
#
#    # Dedicated environments with protections for publishing are strongly recommended.
#    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
#    environment:
#      name: pypi
#      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
#      url: https://pypi.org/p/nnodely
#      #
#      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
#      # ALTERNATIVE: exactly, uncomment the following line instead:
#      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}
#
#    steps:
#      - name: Retrieve release distributions
#        uses: actions/download-artifact@v4
#        with:
#          name: release-dists
#          path: dist/
#
#      - name: Publish release distributions to PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1

name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

on:
  release:
    types: [published]

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    #if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nnodely  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1