name: Publish New nnodely Release

on:
  push:
    tags:
      - "v*"  # Push events to matching v*, i.e., v1.0, v20.15.10

jobs:
  check-tag-version:
    name: Check tag version equal to file version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Extract tag version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          TAG_VERSION=$(echo $TAG_NAME | sed 's/v//')
          echo "Tag version: $TAG_VERSION"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
      - name: Extract file version
        run: |
          FILE_VERSION=$(awk -F"'" '/^__version__/ {print $2}' nnodely/__init__.py)
          echo "File version: $FILE_VERSION"
          echo "FILE_VERSION=$FILE_VERSION" >> $GITHUB_ENV
      - name: Show tag and file versions
        run: |
          echo "The tag version: ${{ env.TAG_VERSION }}"
          echo "The file version: ${{ env.FILE_VERSION }}"
      - name: Check if tag and file versions match
        if: ${{ env.TAG_VERSION != env.FILE_VERSION }}
        run: |
          echo "The tag version ${{ env.TAG_VERSION }} does not match file version ${{ env.FILE_VERSION }}"
          exit 1

  build:
    name: Build distribution of tagged version
    needs:
      - check-tag-version
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish to PyPI
    needs:
    - build

    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nnodely  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish nnodely to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python with Sigstore and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Get the branch version
      run: |
          TAG_NAME="${{ github.ref_name }}"
          TAG_MESSAGE=${{ github.event.workflow_run.head_commit.message }}
          echo "Tag message: $TAG_MESSAGE"
          echo "TAG_MESSAGE=$TAG_MESSAGE" >> $GITHUB_ENV
    - name: Create GitHub release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        echo "The branch version: $tag"
        gh release create $tag --title "$tag" --prerelease --repo ${{ github.repository }} --notes "${{ env.TAG_MESSAGE }}"
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload $tag dist/** --repo ${{ github.repository }}